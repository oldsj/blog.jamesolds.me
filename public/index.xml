<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Finding What Works</title>
    <link>/index.xml</link>
    <description>Recent content on Finding What Works</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 James Olds</copyright>
    <lastBuildDate>Sun, 22 Jan 2017 21:14:02 -0600</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GNS3 VM On Hypver-V</title>
      <link>/post/gns3-hyper-v/</link>
      <pubDate>Sun, 22 Jan 2017 21:14:02 -0600</pubDate>
      
      <guid>/post/gns3-hyper-v/</guid>
      <description>&lt;p&gt;With Windows 10 Pro, you have the option of using a Windows native hypervisor called Hyper-V. It&amp;rsquo;s included with 10 Pro so you
don&amp;rsquo;t have to pay the high price of something like VMWare Workstation while still getting great performance (maybe even
better than VMWare.) I set it up with the default option of using Dynamic Memory so that it won&amp;rsquo;t use much ram until you
start adding a lot of routers and switches and it will scale up the VM&amp;rsquo;s available RAM as needed. I simulated the INE CCIE R/S topology
on it with 20 routers and 5 switches, and sat at around 6GB memory comsumption of the VM and my total system ram usage right up at 7.6GB
of 8GB total. I didn&amp;rsquo;t notice any issues at all because of the high ram usage though, and I think that Hyper-V will scale the VM back and
give more to the host if it needs it. Overall if feels much better than using VM Player which always opened up a window when starting GNS3.
With this option, you just set Hyper-V to boot your VM automatically on reboot of the host and it will always be in the background, available
for you to use as a remote sever from GNS3.&lt;/p&gt;

&lt;p&gt;###What it looks like running INE&amp;rsquo;s full v5 topology&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/gns3-hyperv-memory.png&#34; alt=&#34;gns3-hyverv-memory&#34; /&gt;&lt;/p&gt;

&lt;p&gt;1) Create a Virtual Switch
    - Chose External so you can access it from other computers on your network&lt;br /&gt;
    - Name it GNS3 VM Switch
2) Make a new VM
    - Choose Gen 2
    - I use 1024MB RAM, and allow dynamic memory to add more if needed
    - Call it GNS3 VM
    - Connect it to GNS3 VM Switch
    - Create a virtual hard disk - I used 20GB
3) Change secure boot to Microsoft UEFI Certificate Authority
4) Get the mac address and create a static entry in your dhcp server&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Systems Programming: Rust vs C (Part 1)</title>
      <link>/post/systems-programming-rust-vs-c-1/</link>
      <pubDate>Mon, 02 May 2016 22:10:46 -0500</pubDate>
      
      <guid>/post/systems-programming-rust-vs-c-1/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been wanting to learn systems programming for a long time now. After reading about Rust every-other-day on Hacker News I&amp;rsquo;ve been dying to dive into it but have found that most tutorials online get kind of tough to follow for those of us without a C/C++ background. So, I found a copy of &lt;a href=&#34;http://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628&#34;&gt;The C Programming Language&lt;/a&gt; on Amazon for 15 bucks and will be learning both C and Rust at the same time by doing the exercises in Kernighan &amp;amp; Ritchie&amp;rsquo;s highly praised 2nd edition book. One of the ways I learn best is by teaching. Given that I am learning this as I&amp;rsquo;m going, don&amp;rsquo;t take everything here as the gospel. Having said that, I&amp;rsquo;ll do my best to accurately describe the material. After all, that&amp;rsquo;s another great benefit of teaching while you learn: you have to make sure you are confident in your understanding of a topic before teaching it as fact.&lt;/p&gt;

&lt;p&gt;My background: I have taken two courses on Java in school, and have been messing around with Python on my own for a while now. I know loops, conditionals, functions, arrays, object orientation, string manipulation, etc and I&amp;rsquo;m assuming the reader does as well.&lt;/p&gt;

&lt;p&gt;All of the code can be found on &lt;a href=&#34;https://github.com/oldsjam/learnsystems&#34;&gt;https://github.com/oldsjam/learnsystems&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-1-getting-started&#34;&gt;1.1 Getting Started&lt;/h3&gt;

&lt;p&gt;Right off the bat, I do like rust&amp;rsquo;s println! macro which saves you from an ugly &amp;ldquo;\n&amp;rdquo; in your code. The standard library in C is opt-in while it is in scope by default in Rust. Not a huge deal but its nice to not have to explicitly include it in practically every program you write. I think it&amp;rsquo;s strange to have printing done by a macro, simply because I&amp;rsquo;ve never seen it done that way before. Looking forward to reading more about macros and the Rust team&amp;rsquo;s reasoning behind going that route vs a function/method.&lt;/p&gt;

&lt;p&gt;example.c&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

main() {
  printf(&amp;quot;hello, world\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;example.rs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
  println!(&amp;quot;hello, world&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-2-variables-and-arithmetic-expressions&#34;&gt;1.2 Variables and Arithmetic Expressions&lt;/h3&gt;

&lt;p&gt;We get to try out some fancy features of the Rust language here with a pattern variable binding:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let (lower, upper, step) = (0.0, 300.0, 20.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and by describing the fahr variable as mutable with the mut keyword. By default, everything in Rust is immutable and if, for example you&amp;rsquo;d like a variable to be able to be changed in the future without reassigning it with let, you have to use the mut keyword. I like secure-by-default and it&amp;rsquo;s not a huge inconvenience so this is great. I found the formatting this exercise a little tough in Rust. Firstly, I had to use a macro to get the float numbers to only show 1 decimal place:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;format!(&amp;quot;{:.*}&amp;quot;, 1, ((5.0/9.0) * (fahr-32.0)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, I had to read more on Rust&amp;rsquo;s formatting syntax to get it to give me the same right-justified, tabbed output as we had in C. At first pass, I think the C syntax here make more sense but I can see Rust&amp;rsquo;s formatting syntax being more powerful in the long run. By the way, it&amp;rsquo;s really nice not to have to a) declare variables in advance as we had to in C, and b) Rust&amp;rsquo;s type-inference lets us not have to worry manually describing the types of our variables either (at least not yet).&lt;/p&gt;

&lt;p&gt;example.c&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

main() {
    float fahr, celsius;
    int lower, upper, step;

    lower = 0;
    upper = 300;
    step = 20;

    fahr = lower;
    while (fahr &amp;lt;= upper) {
        celsius = (5.0/9.0) * (fahr-32.0);
        printf(&amp;quot;%3.0f %6.1f\n&amp;quot;, fahr, celsius);
        fahr = fahr + step;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;example.rs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let (lower, upper, step) = (0.0, 300.0, 20.0);

    let mut fahr = lower;
    while fahr &amp;lt;= upper {
        let celsius = format!(&amp;quot;{:.*}&amp;quot;, 1, ((5.0/9.0) * (fahr-32.0)));
        println!(&amp;quot;{:&amp;gt;3} {:&amp;gt;6}&amp;quot;, fahr, celsius);
        fahr += step;

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-3-the-for-statement&#34;&gt;1.3 The For Statement&lt;/h3&gt;

&lt;p&gt;This part got a little interesting because I had to switch to Rust nightly just to be able to change the step size of the for loop iterator. After getting all that sorted, and adding #![feature(step_by)] to my code I was able to get the equivalent output as the C exercise using only a for loop. This also required me to manually cast fahr as a float in order to perform the Fahrenheit to Celsius conversion.&lt;/p&gt;

&lt;p&gt;example.c&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

main() {
    int fahr;

    printf(&amp;quot;Fahrenheit\tCelsius\n&amp;quot;);
    for (fahr = 0; fahr &amp;lt;= 300; fahr = fahr + 20) {
        printf(&amp;quot;%3d %18.1f\n&amp;quot;, fahr, (5.0/9.0) * (fahr-32.0));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;example.rs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#![feature(step_by)]

fn main() {
    println!(&amp;quot;Fahrenheit {:^18}&amp;quot;, &amp;quot;Celsius&amp;quot;);
    for fahr in (0..300).step_by(20) {
        println!(&amp;quot;{:&amp;gt;3} {:&amp;gt;18}&amp;quot;, fahr, format!(&amp;quot;{:.*}&amp;quot;, 1, ((5.0/9.0) * (fahr as f64-32.0))));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-4-symbolic-constants&#34;&gt;1.4 Symbolic Constants&lt;/h3&gt;

&lt;p&gt;Pretty simple stuff here, we&amp;rsquo;re just defining constants for the numbers 0, 20, and 300 so that it&amp;rsquo;s more obvious what the numbers are for, especially since they should not need to be changed. In rust, we have to manually define a constant&amp;rsquo;s type with the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;const LOWER: i32 = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The constant&amp;rsquo;s name is LOWER, and i32 is it&amp;rsquo;s type. Rust is a strongly typed language, essentially meaning that all data must have a type in order to compile. This provides the compiler with the information it needs in order to make sure unsafe operations aren&amp;rsquo;t happening. For example, we defined LOWER as an i32, meaning a 32bit integer. If the compiler did not care about LOWER&amp;rsquo;s type, and we were to perform an operation on it that caused it to be larger than 2,147,483,647 (2^32 in two&amp;rsquo;s compliment), it would cause &amp;ldquo;undefined behavior&amp;rdquo; and almost certainly crash. Rust is great because it stops these types of problems while providing type inference so that you as the programmer do not have to explicitly define the type  in most cases.&lt;/p&gt;

&lt;p&gt;example.c&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

#define    LOWER    0
#define    UPPER    300
#define    STEP     20

main() {
    int fahr;

    for (fahr = LOWER; fahr &amp;lt;= UPPER; fahr+= STEP)
        printf(&amp;quot;%3d %6.1f\n&amp;quot;, fahr, (5.0/9.0)*(fahr-32));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;example.rs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#![feature(step_by)]

const LOWER: i32 = 2147483648;
const UPPER: i32 = 300;
const STEP: i32 = 20;

fn main() {
    for fahr in (LOWER..UPPER).step_by(STEP) {
        println!(&amp;quot;{:&amp;gt;3} {:&amp;gt;6}&amp;quot;, fahr, format!(&amp;quot;{:.*}&amp;quot;, 1, ((5.0/9.0) * (fahr as f64-32.0))));
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>/home/about/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/home/about/</guid>
      <description>

&lt;h2 id=&#34;about&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;My professional career began in 2009 when I enlisted in the US Navy as an information systems technician. I was lucky enough to be able to work on some really interesting systems with great people, picking up network engineering early on. After separating from the Navy, I became very interested in automation and software development while working on my BSc in Computer Science full time.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m currently working on learning systems programming and am documenting the process here on my blog: &lt;a href=&#34;https://blog.jamesolds.me/post/systems-programming-rust-vs-c-1/&#34;&gt;https://blog.jamesolds.me/post/systems-programming-rust-vs-c-1/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>bash on ubuntu on windows</title>
      <link>/post/bash-ubuntu-windows/</link>
      <pubDate>Fri, 08 Apr 2016 12:55:46 -0500</pubDate>
      
      <guid>/post/bash-ubuntu-windows/</guid>
      <description>

&lt;p&gt;In the latest test build of Windows 10 (build 14316), Microsoft introduced
Ubuntu userland as a windows exe. This means you can apt-get anything in
ubuntu’s repositories and PPAs right from windows! This is actually pretty cool.&lt;/p&gt;

&lt;p&gt;More background can be found at
&lt;a href=&#34;https://blogs.windows.com/windowsexperience/2016/04/06/announcing-windows-10-insider-preview-build-14316/&#34;&gt;https://blogs.windows.com/windowsexperience/2016/04/06/announcing-windows-10-insider-preview-build-14316/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;join-windows-insider&#34;&gt;&lt;strong&gt;Join Windows Insider&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Goto windows update settings, click on Advanced options&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Join the Windows Insider program&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After your account is linked, change your Insider level to Fast&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I rebooted after this and had to wait about 10 minutes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Goto Insider hub (windows key -&amp;gt; “insider”)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Goto your account settings -&amp;gt; devices&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click update build (if its not available just wait a few more mins)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;install-ubuntu&#34;&gt;&lt;strong&gt;Install Ubuntu&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After you have the new windows build, launch programs and features&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;windows key -&amp;gt; “windows features”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check “Windows Subsystem for Linux (Beta)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Launch bash (windows key -&amp;gt; “bash”)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hit y to install Ubuntu&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;windows key -&amp;gt; “bash” will now give you bash on ubuntu&amp;hellip; on windows&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>